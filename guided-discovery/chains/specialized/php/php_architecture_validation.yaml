name: php_architecture_validation
description: Comprehensive validation chain for completed PHP clean architecture implementations
version: "1.0"
type: validation
specialization: architecture_compliance

metadata:
 average_duration: 90-120 minutes
 complexity: complex
 certification_capable: true

targets_phase: validation
optimal_for:
 - Post-implementation architecture review
 - Quality gate before production deployment
 - Architecture compliance auditing
 - Team handoff validation
 - Continuous architecture monitoring

targets_uncertainties:
 primary:
 - VALID-001
 - CONFORM-001
 - QUALITY-003
 secondary:
 - All PHP clean architecture uncertainties

prerequisites:
 min_confidence:
 ARCH-001: 0.8
 LAYER-001: 0.8
 PHP-001: 0.9
 required_discoveries:
 - architecture.layers
 - php.architecture_style
 - Implementation must be substantially complete

prompt_sequence:
 # Phase 1: Structural Validation (Foundation)
 - prompt: php_architecture_validator
 order: 1
 mandatory: true
 purpose: Validate overall clean architecture compliance
 phase: structural_validation
 weight: 0.15
 
 - prompt: php_layer_analyzer
 order: 2
 mandatory: true
 purpose: Verify layer separation and boundaries
 phase: structural_validation
 weight: 0.10
 
 - prompt: php_namespace_validator
 order: 3
 mandatory: true
 purpose: Validate PSR-4 compliance and namespace organization
 phase: structural_validation
 weight: 0.05
 
 # Phase 2: Design Principles Validation
 - prompt: php_interface_segregation_checker
 order: 4
 mandatory: true
 purpose: Validate SOLID principles compliance
 phase: design_principles
 weight: 0.10
 
 - prompt: php_coupling_analyzer
 order: 5
 mandatory: true
 purpose: Analyze coupling, cohesion, and dependencies
 phase: design_principles
 weight: 0.10
 
 # Phase 3: Pattern Implementation (Conditional)
 - prompt: php_repository_pattern_finder
 order: 6
 mandatory: false
 purpose: Validate repository pattern implementation
 phase: pattern_implementation
 weight: 0.05
 condition: "task.description contains 'repository' || discoveries.repositories.interfaces != null || always_validate_patterns"
 
 - prompt: cqrs_pattern_detector
 order: 7
 mandatory: false
 purpose: Validate CQRS implementation if present
 phase: pattern_implementation
 weight: 0.05
 condition: "task.description contains 'cqrs' || discoveries.application.command_bus != null || discoveries.cqrs.implementation_level != null"
 
 - prompt: hexagonal_architecture_analyzer
 order: 8
 mandatory: false
 purpose: Validate hexagonal architecture if implemented
 phase: pattern_implementation
 weight: 0.05
 condition: "task.description contains 'hexagonal' || discoveries.architecture.style == 'hexagonal' || discoveries.hexagonal.ports != null"
 
 # Phase 4: Service & Boundary Quality
 - prompt: service_responsibility_validator
 order: 9
 mandatory: true
 purpose: Validate service layer design and SRP compliance
 phase: implementation_quality
 weight: 0.10
 
 - prompt: php_service_layer_analyzer
 order: 10
 mandatory: false
 purpose: Deep dive into service patterns and orchestration
 phase: implementation_quality
 weight: 0.05
 condition: "discoveries.services.layer_organization != null || task.description contains 'service'"
 
 - prompt: php_dto_pattern_analyzer
 order: 11
 mandatory: false
 purpose: Validate DTO usage and boundary management
 phase: implementation_quality
 weight: 0.05
 condition: "discoveries.api.endpoints != null || task.description contains 'api' || task.description contains 'dto'"
 
 - prompt: dto_mapping_strategy_analyzer
 order: 12
 mandatory: false
 purpose: Analyze DTO mapping strategy quality
 phase: implementation_quality
 weight: 0.05
 condition: "discoveries.dto.usage_patterns != null"
 
 # Phase 5: Quality Assurance
 - prompt: php_testing_architecture_analyzer
 order: 13
 mandatory: true
 purpose: Validate testing architecture and coverage
 phase: quality_assurance
 weight: 0.10
 
 - prompt: php_performance_impact_analyzer
 order: 14
 mandatory: false
 purpose: Assess performance impact of architecture
 phase: quality_assurance
 weight: 0.05
 condition: "task.description contains 'performance' || task.description contains 'production' || validation_level == 'comprehensive'"
 
 # Phase 6: Advanced Analysis (Optional)
 - prompt: command_query_separator
 order: 15
 mandatory: false
 purpose: Validate command/query separation if applicable
 phase: advanced_analysis
 weight: 0.05
 condition: "discoveries.cqrs.implementation_level != null || task.description contains 'cqs'"
 
 - prompt: port_adapter_mapper
 order: 16
 mandatory: false
 purpose: Validate port/adapter implementation quality
 phase: advanced_analysis
 weight: 0.05
 condition: "discoveries.hexagonal.ports != null || task.description contains 'port' || task.description contains 'adapter'"

success_criteria:
 min_score_for_pass: 70
 min_score_for_certification: 80
 required_validations:
 - validation.architecture.compliance
 - analysis.coupling.metrics
 - analysis.solid.compliance_score
 - testing.structure
 critical_failures:
 - Domain layer has framework dependencies
 - Dependency rule violations exceed threshold
 - No test coverage for domain layer

scoring_system:
 categories:
 structural_compliance:
 weight: 0.25
 components:
 - layer_separation
 - dependency_direction
 - namespace_organization
 
 design_principles:
 weight: 0.25
 components:
 - solid_compliance
 - coupling_quality
 - cohesion_quality
 
 implementation_quality:
 weight: 0.25
 components:
 - service_design
 - repository_pattern
 - boundary_management
 
 testing_and_quality:
 weight: 0.25
 components:
 - test_coverage
 - test_architecture
 - performance_impact

 certification_levels:
 gold:
 min_score: 90
 badge: "üèÜ Gold Certified Clean Architecture"
 description: "Exemplary implementation meeting highest standards"
 
 silver:
 min_score: 80
 badge: "ü•à Silver Certified Clean Architecture"
 description: "Well-implemented architecture with minor improvements possible"
 
 bronze:
 min_score: 70
 badge: "ü•â Bronze Certified Clean Architecture"
 description: "Acceptable architecture meeting minimum standards"
 
 uncertified:
 max_score: 69
 badge: "‚ö†Ô∏è Needs Improvement"
 description: "Significant architectural issues requiring attention"

chain_variants:
 quick_validation:
 when: "validation_level == 'quick' || ci_pipeline == true"
 modifications:
 - skip_optional_prompts: true
 - reduced_analysis_depth: true
 - target_duration: "30-45 minutes"
 
 deep_validation:
 when: "validation_level == 'deep' || architecture_review == true"
 modifications:
 - force_all_prompts: true
 - extended_analysis: true
 - target_duration: "120-150 minutes"
 
 framework_specific:
 laravel:
 when: "framework == 'laravel'"
 modifications:
 - add_prompt: laravel_to_clean_analyzer
 after: php_architecture_validator
 
 symfony:
 when: "framework == 'symfony'"
 modifications:
 - add_prompt: symfony_clean_mapper
 after: php_architecture_validator

output_artifacts:
 validation_report:
 format: markdown
 includes:
 - executive_summary
 - detailed_findings
 - violation_report
 - improvement_roadmap
 - score_breakdown
 
 validation_scorecard:
 format: json
 includes:
 - overall_score
 - category_scores
 - critical_issues
 - recommendations
 - certification_level
 
 ci_output:
 format: junit_xml
 includes:
 - test_results
 - failure_details
 - exit_codes
 - metrics

post_execution:
 - validation_summary_generator
 - architecture_scorecard_builder
 - improvement_roadmap_creator
 - certification_issuer
 - trend_analyzer

integration_support:
 github_actions:
 output_format: annotations
 fail_on_score_below: 70
 
 gitlab_ci:
 output_format: junit
 artifact_paths:
 - validation_report.md
 - scorecard.json
 
 jenkins:
 output_format: checkstyle
 threshold_configuration: configurable

next_chain_logic:
 - condition: "validation_score < 70"
 next_chain: architecture_remediation_guide
 reason: "Architecture needs significant improvements"
 
 - condition: "validation_score >= 70 && validation_score < 80"
 next_chain: architecture_improvement_guide
 reason: "Architecture is acceptable but can be improved"
 
 - condition: "validation_score >= 80 && has_critical_issues"
 next_chain: critical_issue_resolution
 reason: "High score but critical issues must be addressed"
 
 - condition: "validation_score >= 90"
 next_chain: architecture_optimization_guide
 reason: "Excellent architecture - optimize further"
 
 - default: validation_complete
 reason: "Validation complete - review report for details"