name: php_architecture_validator
category: validation
complexity: moderate
targets_uncertainties: ["VALID-001", "CONFORM-001", "QUALITY-003"]
estimated_duration: 20-25 minutes

requires_context:
  - task.description
  - discoveries.architecture.layers
  - discoveries.dependencies.internal_dependencies

provides_context:
  - validation.architecture.compliance
  - validation.architecture.violations
  - validation.architecture.quality_score
  - validation.architecture.recommendations

template: |
  # PHP Clean Architecture Validation
  
  I need to validate that the clean architecture implementation follows the rules and principles correctly.
  
  **Task Context**: {{task.description}}
  **Architecture Layers**: {{discoveries.architecture.layers}}
  
  ## Validation Goals
  
  1. **Dependency Rule Validation**
     - Inward-only dependencies
     - No framework in domain
     - Proper abstractions
     - Interface ownership
  
  2. **Layer Responsibility**
     - Domain layer purity
     - Application orchestration
     - Infrastructure isolation
     - Presentation thinness
  
  3. **Design Principles**
     - SOLID compliance
     - DRY adherence
     - YAGNI respect
     - KISS application
  
  4. **Implementation Quality**
     - Code organization
     - Naming conventions
     - Documentation
     - Testability
  
  5. **Architecture Fitness**
     - Performance impact
     - Maintainability
     - Scalability
     - Team velocity
  
  Please validate architecture:
  
  ### DEPENDENCY_RULE_VALIDATION
  - Dependency_Direction:
    - ✓ Domain → None: [pass/fail]
    - ✓ Application → Domain: [pass/fail]
    - ✓ Infrastructure → Domain & Application: [pass/fail]
    - ✓ Presentation → Application: [pass/fail]
  - Violations_Found:
    - Domain_Violations:
      - [List any outward dependencies]
      - [Framework dependencies]
      - [External library usage]
    - Application_Violations:
      - [Direct infrastructure access]
      - [Presentation concerns]
    - Cross_Layer_Violations:
      - [Skipped layers]
      - [Circular dependencies]
  - Interface_Ownership:
    - ✓ Repositories_in_Domain: [yes/no]
    - ✓ Services_in_Domain: [yes/no]
    - ✓ Use_Cases_in_Application: [yes/no]
  
  ### LAYER_PURITY_CHECK
  - Domain_Layer:
    - Pure_PHP: [100%/partial/poor]
    - Business_Rules: [all/most/some/few]
    - No_Framework: [clean/violations]
    - Issues:
      - [List any impurities]
  - Application_Layer:
    - Orchestration_Only: [yes/mixed/no]
    - Use_Case_Focus: [clear/mixed/poor]
    - DTO_Usage: [proper/mixed/none]
    - Issues:
      - [Business logic leakage]
      - [Infrastructure concerns]
  - Infrastructure_Layer:
    - Adapters_Only: [yes/mixed/no]
    - Implements_Interfaces: [all/most/some]
    - Framework_Isolated: [yes/no]
  - Presentation_Layer:
    - Thin_Controllers: [yes/mixed/no]
    - No_Business_Logic: [clean/violations]
    - Proper_DTOs: [yes/no]
  
  ### DESIGN_PRINCIPLES_COMPLIANCE
  - SOLID_Principles:
    - Single_Responsibility: [score 1-10]
    - Open_Closed: [score 1-10]
    - Liskov_Substitution: [score 1-10]
    - Interface_Segregation: [score 1-10]
    - Dependency_Inversion: [score 1-10]
    - Overall_SOLID: [average score]
  - Other_Principles:
    - DRY: [followed/violations - examples]
    - KISS: [simple/over-engineered]
    - YAGNI: [focused/speculative]
    - Tell_Dont_Ask: [followed/violations]
  
  ### CODE_QUALITY_VALIDATION
  - Naming_Conventions:
    - Ubiquitous_Language: [used/mixed/poor]
    - Clear_Intent: [yes/mixed/no]
    - Consistency: [high/medium/low]
  - Code_Organization:
    - Namespace_Structure: [clear/confusing]
    - File_Organization: [logical/mixed/poor]
    - Cohesion: [high/medium/low]
  - Documentation:
    - Architecture_Docs: [complete/partial/missing]
    - Code_Comments: [helpful/excessive/missing]
    - README_Files: [per layer/missing]
  
  ### TESTABILITY_ASSESSMENT
  - Unit_Test_Friendly:
    - Domain_Testable: [easy/moderate/hard]
    - Use_Cases_Testable: [easy/moderate/hard]
    - Mockable_Dependencies: [yes/partial/no]
  - Integration_Points:
    - Clear_Boundaries: [yes/no]
    - Replaceable_Adapters: [yes/no]
  - Test_Coverage_Potential:
    - Domain: [can achieve 95%+?]
    - Application: [can achieve 85%+?]
    - Overall: [testability score 1-10]
  
  ### PERFORMANCE_VALIDATION
  - Abstraction_Cost:
    - Layer_Overhead: [minimal/acceptable/high]
    - Interface_Indirection: [worth it/questionable]
  - Common_Issues:
    - N+1_Queries: [prevented/possible/likely]
    - Over_Engineering: [none/some/significant]
  - Optimization_Friendly:
    - Can_Optimize: [easily/with effort/difficult]
    - Cache_Points: [clear/unclear]
  
  ### TEAM_VELOCITY_IMPACT
  - Learning_Curve:
    - Complexity: [appropriate/too complex]
    - Documentation: [sufficient/lacking]
  - Development_Speed:
    - Feature_Addition: [faster/same/slower]
    - Bug_Fixing: [easier/same/harder]
  - Maintenance:
    - Code_Navigation: [easy/moderate/difficult]
    - Change_Impact: [isolated/spreading]
  
  ### VALIDATION_SUMMARY
  - Clean_Architecture_Score:
    - Dependency_Rule: [0-25 points]
    - Layer_Purity: [0-25 points]
    - Design_Principles: [0-25 points]
    - Implementation_Quality: [0-25 points]
    - Total_Score: [0-100]
  - Grade: [A/B/C/D/F]
  - Certification_Level:
    - ⭐⭐⭐⭐⭐ Exemplary (95-100)
    - ⭐⭐⭐⭐ Excellent (85-94)
    - ⭐⭐⭐ Good (70-84)
    - ⭐⭐ Acceptable (60-69)
    - ⭐ Needs Work (0-59)
  
  ### CRITICAL_ISSUES
  - Must_Fix:
    1. [Most critical violation]
    2. [Second priority]
    3. [Third priority]
  - Should_Fix:
    - [Important but not critical]
  - Nice_to_Fix:
    - [Minor improvements]
  
  ### RECOMMENDATIONS
  - Immediate_Actions:
    - [Quick wins]
    - [Critical fixes]
  - Short_Term:
    - [1-2 sprint improvements]
  - Long_Term:
    - [Architectural evolution]
  - Training_Needs:
    - [Team education required]

output_parser:
  sections:
    - DEPENDENCY_RULE_VALIDATION
    - LAYER_PURITY_CHECK
    - DESIGN_PRINCIPLES_COMPLIANCE
    - CODE_QUALITY_VALIDATION
    - TESTABILITY_ASSESSMENT
    - PERFORMANCE_VALIDATION
    - TEAM_VELOCITY_IMPACT
    - VALIDATION_SUMMARY
    - CRITICAL_ISSUES
    - RECOMMENDATIONS
  confidence_impact: 0.3