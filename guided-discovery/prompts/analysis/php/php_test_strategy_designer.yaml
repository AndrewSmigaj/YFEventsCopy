name: php_test_strategy_designer
category: analysis
complexity: moderate
targets_uncertainties: ["TEST-002", "STRATEGY-001", "QUALITY-002"]
estimated_duration: 20-25 minutes

requires_context:
  - task.description
  - discoveries.testing.structure
  - discoveries.architecture.layers

provides_context:
  - testing.strategy.design
  - testing.strategy.pyramid
  - testing.strategy.mocking_approach
  - testing.strategy.implementation_plan

template: |
  # PHP Clean Architecture Test Strategy Design
  
  I need to design a comprehensive testing strategy for the clean architecture implementation.
  
  **Task Context**: {{task.description}}
  **Current Testing**: {{discoveries.testing.structure}}
  **Architecture Layers**: {{discoveries.architecture.layers}}
  
  ## Strategy Goals
  
  1. **Test Pyramid Design**
     - Unit test coverage
     - Integration test scope
     - Acceptance test approach
     - E2E test requirements
  
  2. **Layer-Specific Testing**
     - Domain layer testing
     - Application layer testing
     - Infrastructure testing
     - API/Presentation testing
  
  3. **Mocking Strategy**
     - What to mock
     - Mock vs stub vs fake
     - Test doubles design
     - Isolation approach
  
  4. **Test Data Management**
     - Fixtures vs factories
     - Test data builders
     - Database strategies
     - State management
  
  5. **CI/CD Integration**
     - Test execution order
     - Performance targets
     - Coverage requirements
     - Quality gates
  
  Please design testing strategy:
  
  ### TEST_PYRAMID_DESIGN
  - Unit_Tests (70%):
    - Scope: [Individual classes, pure functions]
    - Target_Coverage: 90%+
    - Execution_Time: <5 seconds
    - Key_Areas:
      - Domain entities and VOs
      - Domain services
      - Use cases (mocked dependencies)
      - Value object validation
  
  - Integration_Tests (20%):
    - Scope: [Component interaction, real dependencies]
    - Target_Coverage: Key paths
    - Execution_Time: <30 seconds
    - Key_Areas:
      - Repository implementations
      - External service clients
      - Database operations
      - Event handling
  
  - Acceptance_Tests (10%):
    - Scope: [Full scenarios, user journeys]
    - Target_Coverage: Critical features
    - Execution_Time: <2 minutes
    - Key_Areas:
      - API endpoints
      - Complete use cases
      - Business scenarios
  
  ### LAYER_TESTING_STRATEGY
  - Domain_Layer:
    - Approach: [Pure unit tests, no mocks needed]
    - Example_Test:
      ```php
      class OrderTest extends TestCase {
          public function test_order_total_calculation(): void {
              $order = new Order();
              $order->addItem(new OrderItem('SKU1', 100, 2));
              $this->assertEquals(200, $order->getTotal());
          }
      }
      ```
    - Focus: Business rules, invariants, calculations
  
  - Application_Layer:
    - Approach: [Mock infrastructure, test orchestration]
    - Example_Test:
      ```php
      class CreateOrderUseCaseTest extends TestCase {
          public function test_creates_order_successfully(): void {
              $repository = $this->createMock(OrderRepositoryInterface::class);
              $repository->expects($this->once())->method('save');
              
              $useCase = new CreateOrderUseCase($repository);
              $response = $useCase->execute($request);
              
              $this->assertTrue($response->isSuccess());
          }
      }
      ```
    - Focus: Use case flow, coordination, business logic
  
  - Infrastructure_Layer:
    - Approach: [Integration tests with real dependencies]
    - Test_Types:
      - Repository tests with test database
      - External API tests with stubs
      - Cache tests with in-memory cache
    - Focus: Data persistence, external integration
  
  - Presentation_Layer:
    - Approach: [Feature tests, API tests]
    - Test_Types:
      - HTTP request/response tests
      - Input validation tests
      - Authentication/authorization tests
    - Focus: Contract compliance, security, validation
  
  ### MOCKING_STRATEGY
  - Mock_vs_Real:
    - Always_Mock:
      - External APIs
      - Payment gateways
      - Email services
      - File systems (in unit tests)
    - Sometimes_Mock:
      - Database (unit vs integration)
      - Cache (depending on test type)
      - Event dispatcher (isolation tests)
    - Never_Mock:
      - Domain objects
      - Value objects
      - DTOs
      - Pure functions
  
  - Test_Double_Types:
    - Mocks: [For behavior verification]
    - Stubs: [For state verification]
    - Fakes: [In-memory implementations]
    - Spies: [For interaction recording]
  
  - Mock_Framework_Choice:
    - PHPUnit_Mocks: [For simple cases]
    - Mockery: [For complex scenarios]
    - Prophecy: [For BDD-style tests]
  
  ### TEST_DATA_STRATEGY
  - Factory_Pattern:
    ```php
    class UserFactory {
        public static function create(array $attributes = []): User {
            return new User(
                $attributes['id'] ?? UserId::generate(),
                $attributes['email'] ?? 'test@example.com',
                $attributes['name'] ?? 'Test User'
            );
        }
    }
    ```
  
  - Builder_Pattern:
    ```php
    class OrderBuilder {
        private array $items = [];
        
        public function withItem(string $sku, int $price): self {
            $this->items[] = new OrderItem($sku, $price, 1);
            return $this;
        }
        
        public function build(): Order {
            $order = new Order();
            foreach ($this->items as $item) {
                $order->addItem($item);
            }
            return $order;
        }
    }
    ```
  
  - Database_Strategy:
    - Transactions: [Rollback after each test]
    - Fixtures: [Minimal, shared setup]
    - Factories: [Dynamic test data]
    - Seeds: [Only for dev/staging]
  
  ### CONTINUOUS_TESTING
  - Test_Execution_Order:
    1. Static analysis (PHPStan/Psalm)
    2. Code style (PHP-CS-Fixer)
    3. Unit tests (parallel execution)
    4. Integration tests
    5. Acceptance tests
    6. Mutation tests (optional)
  
  - Quality_Gates:
    - Unit_Coverage: >85%
    - Integration_Coverage: Key paths
    - Static_Analysis: Level 8
    - No_Failed_Tests: Required
    - Performance: No regression
  
  - Performance_Targets:
    - Unit_Suite: <10 seconds
    - Integration_Suite: <1 minute
    - Full_Suite: <5 minutes
  
  ### IMPLEMENTATION_PLAN
  - Phase_1_Foundation:
    - Set up test structure
    - Configure PHPUnit
    - Create base test classes
    - Implement factories/builders
  
  - Phase_2_Domain_Tests:
    - Test all entities
    - Test value objects
    - Test domain services
    - Achieve 95%+ coverage
  
  - Phase_3_Application_Tests:
    - Test use cases
    - Mock infrastructure
    - Test orchestration
    - Achieve 85%+ coverage
  
  - Phase_4_Integration_Tests:
    - Test repositories
    - Test external services
    - Test event handling
    - Cover critical paths
  
  - Phase_5_Acceptance_Tests:
    - Test API endpoints
    - Test user journeys
    - Performance tests
    - Security tests
  
  ### TEST_QUALITY_METRICS
  - Coverage_Targets:
    - Domain: 95%+
    - Application: 85%+
    - Infrastructure: 70%+
    - Overall: 80%+
  - Test_Quality:
    - Fast: <10s for unit tests
    - Isolated: No test dependencies
    - Repeatable: Same result every time
    - Self-Validating: Clear pass/fail
  - Maintenance:
    - DRY: Shared test utilities
    - Clear: Descriptive names
    - Focused: One assertion per test
    - Updated: Tests evolve with code

output_parser:
  sections:
    - TEST_PYRAMID_DESIGN
    - LAYER_TESTING_STRATEGY
    - MOCKING_STRATEGY
    - TEST_DATA_STRATEGY
    - CONTINUOUS_TESTING
    - IMPLEMENTATION_PLAN
    - TEST_QUALITY_METRICS
  confidence_impact: 0.3