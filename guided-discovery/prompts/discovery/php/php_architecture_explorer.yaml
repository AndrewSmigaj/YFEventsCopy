name: php_architecture_explorer
category: discovery
targets_uncertainties: ['PHP-001', 'ARCH-001', 'PSR-001']

template: |
  # PHP Architecture Discovery

  I need to understand the PHP architecture and standards used in this codebase.

  **Task Context**: {{task.description}}

  ## Discovery Goals

  1. **PHP Environment**
   - PHP version (check composer.json, .php-version, or phpinfo)
   - Extensions and requirements
   - Composer configuration

  2. **Architecture Style**
   - Overall architecture pattern (MVC, Clean/Hexagonal, Layered, etc.)
   - Directory structure and organization
   - Separation of concerns approach

  3. **PSR Standards Compliance**
   - PSR-4 autoloading structure
   - PSR-12 coding standards
   - PSR-7/15 (if HTTP messages used)
   - PSR-11 (if container used)

  4. **Namespace Organization**
   - Root namespace(s)
   - Layer-based or feature-based organization
   - Vendor namespace conventions

  5. **Key Architecture Indicators**
   - Presence of Domain, Application, Infrastructure folders
   - Interface/implementation separation
   - Use of design patterns (Repository, Factory, etc.)

  Please explore the codebase and provide findings:

  ### PHP_ENVIRONMENT
  - Version: [PHP version]
  - Package_Manager: composer
  - Key_Extensions: [list required extensions]
  - Autoload_Type: [psr-4/psr-0/classmap/files]

  ### ARCHITECTURE_STYLE
  - Pattern: [Clean Architecture/Hexagonal/MVC/Layered/Custom]
  - Organization: [layer-based/feature-based/mixed]
  - Key_Directories:
  - Domain: [path if exists]
  - Application: [path if exists]
  - Infrastructure: [path if exists]
  - Presentation: [path if exists]

  ### PSR_COMPLIANCE
  - Autoloading: [PSR-4/PSR-0/mixed/none]
  - Coding_Standard: [PSR-12/PSR-2/custom]
  - Container: [PSR-11 compliant/custom/none]
  - HTTP: [PSR-7/PSR-15/none]

  ### NAMESPACE_STRUCTURE
  - Root_Namespace: [e.g., App\, YourCompany\ProjectName\]
  - Structure_Type: [layer-based/feature-based]
  - Example_Namespaces:
  - [list 3-5 example namespaces showing structure]

  ### CLEAN_ARCHITECTURE_INDICATORS
  - Domain_Layer: [present/absent/partial]
  - Use_Cases: [present/absent/partial]
  - Dependency_Rule: [followed/violated/unclear]
  - Interface_Adapters: [present/absent/partial]

  ### DISCOVERIES
  ```json
  {
  "discoveries": {
    "php_environment": {
      "version": "[PHP version]",
      "package_manager": "composer",
      "extensions": ["ext1", "ext2"],
      "autoload_type": "psr-4"
    },
    "architecture": {
      "pattern": "[identified pattern]",
      "organization": "[layer/feature-based]",
      "layers": {
        "domain": "[path if exists]",
        "application": "[path if exists]",
        "infrastructure": "[path if exists]",
        "presentation": "[path if exists]"
      }
    },
    "psr_compliance": {
      "autoloading": "[PSR-4/PSR-0/mixed/none]",
      "coding_standard": "[PSR-12/PSR-2/custom]",
      "container": "[PSR-11 compliant/custom/none]",
      "http": "[PSR-7/PSR-15/none]"
    },
    "namespace_structure": {
      "root_namespace": "[identified namespace]",
      "structure_type": "[layer/feature-based]",
      "examples": ["namespace1", "namespace2"]
    },
    "clean_architecture_indicators": {
      "domain_layer": "[present/absent/partial]",
      "use_cases": "[present/absent/partial]",
      "dependency_rule": "[followed/violated/unclear]",
      "interface_adapters": "[present/absent/partial]"
    }
  }
  }
  ```

  ### UNCERTAINTY_UPDATES
  - PHP-001 (PHP environment and standards): resolved/partial based on findings
  - ARCH-001 (Overall architecture): resolved/partial based on findings
  - PSR-001 (PSR standards compliance): resolved/partial based on findings
