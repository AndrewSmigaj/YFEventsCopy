name: php_domain_explorer
category: discovery
targets_uncertainties: ['DOMAIN-001', 'DDD-001', 'ENTITY-001']

template: |
  # PHP Domain Layer Exploration
  
  I need to explore the domain layer implementation in this PHP codebase.
  
  **Task Context**: {{task.description}}
  **Architecture**: {{discoveries.architecture.pattern}}
## Discovery Goals

1. **Domain Entities**
   - Core business entities
   - Entity identity management
   - Business invariants
   - Entity relationships

2. **Value Objects**
   - Immutable value types
   - Validation rules
   - Equality comparison
   - Common value objects (Money, Email, etc.)

3. **Aggregates**
   - Aggregate roots
   - Aggregate boundaries
   - Consistency boundaries
   - Transaction boundaries

4. **Domain Services**
   - Business logic services
   - Domain operations
   - Service interfaces

5. **Domain Events**
   - Event types
   - Event dispatching
   - Event handlers
   - Event sourcing (if used)

Please explore the domain layer:

### DOMAIN_ENTITIES
- Core_Entities: [list main entities]
- Identity_Pattern: [UUID/auto-increment/custom]
- Example_Entity:
  - Name: [e.g., User, Order, Product]
  - Properties: [list key properties]
  - Invariants: [list business rules]
  - Methods: [list behavior methods]
- Entity_Base_Class: [if exists]

### VALUE_OBJECTS
- Common_VOs: [Money, Email, Address, etc.]
- Implementation_Pattern: [final classes/immutable/validation]
- Example_VO:
  - Name: [e.g., Money, EmailAddress]
  - Properties: [list properties]
  - Validation: [describe validation]
  - Equality: [how equality is handled]
- VO_Base_Class: [if exists]

### AGGREGATES
- Identified_Aggregates: [list aggregate roots]
- Boundary_Definition: [how boundaries are defined]
- Example_Aggregate:
  - Root: [e.g., Order]
  - Members: [e.g., OrderLine, OrderStatus]
  - Invariants: [aggregate-level rules]
- Persistence_Boundary: [how aggregates are persisted]

### DOMAIN_SERVICES
- Service_List: [list domain services]
- Service_Pattern: [stateless/stateful]
- Example_Service:
  - Name: [e.g., PricingService]
  - Operations: [list main operations]
  - Dependencies: [list dependencies]
- Interface_Definition: [interfaces used?]

### DOMAIN_EVENTS
- Event_Usage: [none/basic/extensive]
- Event_Types: [list domain events]
- Event_Pattern: [simple classes/event sourcing]
- Dispatch_Mechanism: [how events are raised]
- Example_Event:
  - Name: [e.g., OrderPlaced]
  - Payload: [what data it carries]

### DOMAIN_QUALITY
- Anemic_Domain: [yes/no/partial]
- Business_Logic_Location: [domain/services/mixed]
- Framework_Independence: [yes/no/partial]
- Test_Coverage: [high/medium/low/none]
- Recommendations: [list improvements]

## Context Update

After exploring the domain layer, I'll update the task's context file with:

### DISCOVERIES
```json
{
  "discoveries": {
    "domain": {
      "entities": {
        "core_entities": ["Entity1", "Entity2"],
        "identity_pattern": "UUID/auto-increment/custom",
        "entity_base_class": "path/to/base/class",
        "examples": [
          {
            "name": "User",
            "properties": ["id", "email", "name"],
            "invariants": ["email must be unique"],
            "methods": ["changeEmail", "activate"]
          }
        ]
      },
      "value_objects": {
        "common_vos": ["Money", "Email", "Address"],
        "implementation_pattern": "final immutable classes",
        "vo_base_class": "path/to/vo/base",
        "examples": [
          {
            "name": "Money",
            "properties": ["amount", "currency"],
            "validation": "positive amount, valid currency"
          }
        ]
      },
      "aggregates": {
        "identified_aggregates": ["Order", "User", "Product"],
        "boundary_definition": "transaction boundaries",
        "examples": [
          {
            "root": "Order",
            "members": ["OrderLine", "OrderStatus"],
            "invariants": ["total must match sum of lines"]
          }
        ]
      },
      "domain_services": {
        "services": ["PricingService", "TaxCalculator"],
        "pattern": "stateless with interfaces",
        "interface_usage": true
      },
      "domain_events": {
        "usage": "none/basic/extensive",
        "event_types": ["OrderPlaced", "UserRegistered"],
        "pattern": "simple event classes",
        "dispatch_mechanism": "event dispatcher"
      },
      "quality": {
        "anemic_domain": false,
        "business_logic_location": "domain",
        "framework_independence": true,
        "test_coverage": "high",
        "recommendations": ["improvement 1", "improvement 2"]
      }
    }
  }
}
```

### UNCERTAINTY_UPDATES
- DOMAIN-001 (Domain model structure): resolved/partial based on findings
- DDD-001 (DDD patterns): resolved/partial based on implementation
- ENTITY-001 (Entity implementation): resolved/partial based on analysis
