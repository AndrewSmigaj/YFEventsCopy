name: php_layer_analyzer
category: discovery
targets_uncertainties: ['LAYER-001', 'ARCH-002', 'BOUNDARY-001']

template: |
  # PHP Layer Analysis

  ## Discovery Goals

  1. **Layer Identification**
   - Identify all architectural layers
   - Map directories to layers
   - Understand layer responsibilities

  2. **Layer Boundaries**
   - How layers communicate
   - Dependency directions
   - Boundary enforcement mechanisms

  3. **Clean Architecture Layers** (if applicable)
   - Entities/Domain Models
   - Use Cases/Application Services
   - Interface Adapters/Controllers
   - Frameworks & Drivers/Infrastructure

  4. **Dependency Analysis**
   - Inward/outward dependencies
   - Layer coupling
   - Dependency injection patterns

  5. **Boundary Violations**
   - Direct framework usage in domain
   - Database access outside repositories
   - Business logic in controllers

  Please analyze the layer structure:

  ### LAYER_MAPPING
  - Domain_Layer:
  - Location: [path]
  - Components: [entities, value objects, domain services]
  - Pure_PHP: [yes/no - any framework dependencies?]
  - Application_Layer:
  - Location: [path]
  - Components: [use cases, application services, DTOs]
  - Dependencies: [what it depends on]
  - Infrastructure_Layer:
  - Location: [path]
  - Components: [repositories, external services, persistence]
  - Frameworks: [list frameworks used]
  - Presentation_Layer:
  - Location: [path]
  - Components: [controllers, views, API endpoints]
  - Type: [web/api/cli/mixed]

  ### DEPENDENCY_FLOW
  - Direction: [inward/outward/mixed]
  - Domain_Dependencies: [none/minimal/heavy]
  - Dependency_Injection: [container/manual/mixed]
  - Interface_Usage: [extensive/moderate/minimal]

  ### LAYER_BOUNDARIES
  - Enforcement: [strict/loose/none]
  - Communication_Pattern: [interfaces/direct/mixed]
  - DTO_Usage: [yes/no/partial]
  - Boundary_Objects: [list key boundary interfaces/classes]

  ### VIOLATIONS_FOUND
  - Domain_Violations: [list any framework dependencies in domain]
  - Application_Violations: [list any direct infrastructure access]
  - Dependency_Rule_Violations: [list any outward dependencies]

  ### LAYER_QUALITY
  - Separation: [excellent/good/moderate/poor]
  - Testability: [high/medium/low]
  - Maintainability: [high/medium/low]
  - Recommendations: [list 2-3 improvement suggestions]

  ## Context Update

  After analyzing layers, I'll update the task's context file with:

  ### DISCOVERIES
  ```json
  {
    "discoveries": {
      "layers": {
        "mapping": {
          "domain": {
            "location": "path/to/domain",
            "components": ["entities", "value objects", "domain services"],
            "pure_php": true
          },
          "application": {
            "location": "path/to/application",
            "components": ["use cases", "services", "DTOs"],
            "dependencies": ["domain"]
          },
          "infrastructure": {
            "location": "path/to/infrastructure",
            "components": ["repositories", "external services"],
            "frameworks": ["doctrine", "symfony"]
          },
          "presentation": {
            "location": "path/to/presentation",
            "components": ["controllers", "views", "API endpoints"],
            "type": "web/api/cli"
          }
        },
        "dependency_flow": {
          "direction": "inward",
          "domain_dependencies": "none",
          "dependency_injection": "container",
          "interface_usage": "extensive"
        },
        "boundaries": {
          "enforcement": "strict/loose/none",
          "communication_pattern": "interfaces",
          "dto_usage": true,
          "boundary_objects": ["interface1", "interface2"]
        },
        "violations": {
          "domain": [],
          "application": [],
          "dependency_rule": []
        },
        "quality": {
          "separation": "good",
          "testability": "high",
          "maintainability": "high",
          "recommendations": ["improvement1", "improvement2"]
        }
      }
    }
  }
  ```

  ### UNCERTAINTY_UPDATES
  - LAYER-001 (Layer structure): resolved/partial based on findings
  - ARCH-002 (Architecture details): resolved/partial based on analysis
  - BOUNDARY-001 (Layer boundaries): resolved/partial based on enforcement
