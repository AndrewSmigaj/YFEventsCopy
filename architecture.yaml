# YFEvents Architecture Documentation
# Last Updated: January 2025 - Complete Chat System Integration

project:
  name: YFEvents
  version: 2.3.0
  description: Community Events Platform with integrated real-time communication
  namespace: YFEvents
  status: production-ready
  completion: 99%  # Chat system fully integrated, all routes secured
  php_version: "^8.1"  # Core requirement, some modules require 8.2

architecture:
  pattern: Clean Architecture (Hexagonal)
  principles:
    - Domain-Driven Design (DDD)
    - SOLID Principles
    - Dependency Inversion
    - Repository Pattern
    - Service Layer Pattern

structure:
  root:
    - .claude/        # Claude Code configuration
    - config/         # Configuration files (database, app, email, services)
    - database/       # SQL schemas and migrations
    - docs/           # Project documentation
    - modules/        # Independent feature modules
    - public/         # Web root (minimal exposure)
    - resources/      # Views, assets, templates
    - routes/         # Route definitions
    - scripts/        # Utility and maintenance scripts
    - src/            # Core application code
    - storage/        # Runtime storage (logs, cache, sessions)
    - tests/          # Test suites
    - vendor/         # Composer dependencies

  src:
    layers:
      domain:
        path: src/Domain/
        description: Business logic and entities
        components:
          - Events/       # Event management
          - Shops/        # Shop/business listings
          - Users/        # User management
          - Claims/       # Estate sale claims
          - Communication/ # Real-time chat and messaging system
          - YFClaim/      # YFClaim-specific domain entities
          - Scrapers/     # Web scraping interfaces
          - Common/       # Shared interfaces
        notes:
          - Communication is integrated into core domain layer
          - YFClaim domain entities added for inquiries
        
      application:
        path: src/Application/
        description: Use cases and application services
        components:
          - Services/     # Application services
            - AuthService.php        # Unified authentication wrapper
            - Communication/         # Chat system services
              - CommunicationService.php      # Main orchestrator
              - AdminSellerChatService.php    # Seller-specific logic
            - YFClaim/              # YFClaim services
              - InquiryService.php  # Contact/inquiry handling
          - Controllers/  # Admin controllers
          - Validation/   # Input validation
          - Bootstrap.php # Application initialization
          
      infrastructure:
        path: src/Infrastructure/
        description: External implementations
        components:
          - Config/       # Configuration management
          - Container/    # Dependency injection
          - Database/     # Database connections
          - Repositories/ # Repository implementations
            - Communication/  # Chat system repositories
              - ChannelRepository.php
              - MessageRepository.php
              - ParticipantRepository.php
              - NotificationRepository.php
            - Claims/        # Estate sale repositories
              - SellerRepository.php
            - YFClaim/       # YFClaim repositories
              - InquiryRepository.php
          - Services/     # Infrastructure services
          - Http/         # HTTP handling (Router, ErrorHandler)
          - Utils/        # Utilities (EnvLoader, etc.)
        details:
          http:
            router:
              - Handles route registration (get, post, put, delete)
              - Converts {param} patterns to regex capture groups
              - Extracts path parameters to $_GET array
              - No middleware system implemented
              - Direct superglobal usage (no Request/Response objects)
            error_handler:
              - Handles 404 (not found)
              - Handles 405 (method not allowed)
              - Handles 500 (internal server error)
          container:
            - Supports bind(), singleton(), and instance() methods
            - Lazy loading via closures
            - Constructor-based resolution with reflection
            - No auto-wiring capabilities
          
      presentation:
        path: src/Presentation/
        description: User interface layer
        components:
          - Api/          # API controllers
            - Controllers/
              - Communication/  # Chat API endpoints
                - ChannelApiController.php
                - MessageApiController.php
                - NotificationApiController.php
                - AnnouncementApiController.php
              - YFClaim/       # YFClaim API endpoints
                - InquiryApiController.php
          - Http/         # Web controllers
            - Controllers/
              - CommunicationController.php  # Chat web interface
              - SellerDashboardTrait.php    # Seller dashboard helper
        details:
          controller_patterns:
            - All controllers receive ContainerInterface and ConfigInterface
            - Manual service resolution in constructors
            - BaseController provides JSON response methods
            - No action injection or parameter binding
          view_rendering:
            - No template engine (Blade/Twig)
            - HomeControllerFixed trait uses output buffering
            - Direct HTML generation in controllers
            - JSON responses for API endpoints
          api_structure:
            - Separate Api\Controllers namespace
            - EventApiController and ShopApiController implemented
            - CORS headers set in constructor
            - RESTful resource methods (index, show, store, etc.)
        notes:
          - HomeControllerFixed trait added for reliable rendering

modules:
  structure:
    yfauth:
      namespace: YFEvents\Modules\YFAuth
      description: Authentication and authorization (centralized auth provider)
      status: active
      components:
        - src/Models/
        - src/Services/
        - src/Middleware/
        - database/schema.sql
        - www/          # Module web files
      notes:
        - Central authentication provider for entire system
        - Handles all user types (admin, sellers, buyers)
        - RBAC (Role-Based Access Control) implemented
        
    yfclaim:
      namespace: YFEvents\Modules\YFClaim
      description: Estate sale system with contact-based inquiries
      status: active
      components:
        - src/Models/
        - src/Services/
        - src/Utils/
        - database/schema.sql
        - www/          # Module web files
      changes:
        - Removed: Offer/bidding functionality completely
        - Added: Inquiry system for contact forms
        - Modified: Sellers authenticate via YFAuth
        - Database: password_hash column now nullable
      integration:
        - Chat system embedded in seller dashboard
        - Unread message badge on navigation
        - Auto-join support and tips channels
      note: module.json still contains outdated auction/bidding references
        
    yftheme:
      namespace: YFEvents\Modules\YFTheme
      description: Theme customization system
      status: active
      components:
        - src/Models/
        - src/Services/
        - database/schema.sql
        - www/          # Module web files
        
    yfclassifieds:
      namespace: YFEvents\Modules\YFClassifieds
      description: Classified listings
      status: inactive  # Disabled due to overlap with YFClaim
      note: Functionality merged into YFClaim

communication_system:
  description: Integrated real-time chat and messaging
  location: Core domain (not a module)
  status: fully-functional
  
  architecture:
    domain_layer:
      entities:
        - Channel: Chat rooms/channels
        - Message: Individual messages
        - Participant: Channel membership
        - Notification: User notifications
        - Attachment: File attachments
      value_objects:
        - ChannelType: public, private, event, vendor, announcement
        - MessageType: text, system, announcement
      services:
        - ChannelService: Channel management logic
        - MessageService: Message handling logic
        - AnnouncementService: System announcements
        
    infrastructure_layer:
      repositories:
        - ChannelRepository: Fixed SQL column mappings
        - MessageRepository: Message persistence
        - ParticipantRepository: Membership management
        - NotificationRepository: Notification tracking
      database:
        - communication_channels
        - communication_messages
        - communication_participants
        - communication_notifications
        - communication_attachments
        - communication_email_addresses
        - communication_reactions
        
    application_layer:
      services:
        - CommunicationService: Main orchestration
        - AdminSellerChatService: Seller-specific features
          
    presentation_layer:
      web:
        - CommunicationController: Standalone and embedded views
        - Routes: /communication, /communication/embedded
        - Assets: /public/assets/communication/
      api:
        - ChannelApiController: Channel management
        - MessageApiController: Message operations
        - NotificationApiController: Notification preferences
        - AnnouncementApiController: Admin announcements
        
  features:
    - Real-time messaging with @mentions
    - File attachments and reactions
    - Unread message tracking
    - Email notifications
    - PWA support with service worker
    - Mobile-responsive design
    - Bootstrap 5.1.3 UI framework
    
  integration:
    - Authentication via YFAuth module
    - Embedded iframe in seller dashboard
    - Session-based access control
    - YFClaim item references in messages
    - Auto-join channels on seller login
    
  recent_fixes:
    - Fixed JavaScript errors preventing UI visibility
    - Added missing UI functions (toggleSidebar, etc.)
    - Improved mobile responsive CSS
    - Fixed SQL column name mismatches
    - Added Bootstrap CSS integration
    - Created global Support and Tips channels

configuration:
  environment:
    file: .env
    example: .env.example
    loader: YFEvents\Infrastructure\Utils\EnvLoader
    
  files:
    - config/database.php    # Database settings (uses env vars)
    - config/app.php        # Application settings (uses env vars)
    - config/email.php      # Email configuration (uses env vars)
    - config/services/      # Service configurations
    
  entry_point:
    file: public/index.php
    bootstrap: YFEvents\Application\Bootstrap
    router: YFEvents\Infrastructure\Http\Router
    flow:
      - Bootstrap::boot() creates Container instance
      - ServiceProvider registers all bindings
      - Router instance created with container
      - Route files loaded via closure scope
      - Router::dispatch() handles request

routing_system:
  status: fully_functional_and_secured
  web_root: /public/
  router: YFEvents\Infrastructure\Http\Router
  routes:
    - routes/web.php        # Web routes (HTML pages)
    - routes/api.php        # API routes (JSON responses)
  
  implementation:
    - Single entry point through public/index.php
    - All requests routed through central router
    - RESTful route patterns with parameter extraction
    - Legacy URLs handled via route definitions
    - No direct file access in production
    - Router converts {param} patterns to regex capture groups
    - Parameters extracted to $_GET array for controller access
    - Controllers instantiated with container and config in executeRoute()
    - No route caching or compilation
    - No route groups or prefixes
    - Direct method calls for route registration
  
  security_improvements:
    - All seller routes now require authentication
    - Added requireSellerAuth() method to ClaimsController
    - Proper error responses for API vs web requests
    - Clear parameter validation messages
    - Removed unnecessary/duplicate routes
    - Disabled YFClassifieds module
  
  recent_fixes:
    - Confirmed Apache DocumentRoot points to /public/
    - Fixed Shop entity database column mismatch
    - Added defensive NULL handling in controllers
    - Resolved homepage rendering with output buffering
    - Cleared PHP opcache to load fixes
    - Secured all seller dashboard routes
    - Fixed confusing error messages

authentication:
  unified_system:
    service: YFEvents\Application\Services\AuthService
    provider: YFEvents\Modules\YFAuth\Services\AuthService
    description: Centralized authentication wrapper
    features:
      - Single login interface for all user types
      - Standardized session management
      - Role-based access control (RBAC)
      - Automatic session regeneration
    session_structure:
      auth:
        - user_id
        - username
        - email
        - roles[]
        - permissions[]
        - session_id
        - login_time
        - last_activity
      # YFClaim maintains separate session for compatibility
      yfclaim_seller_id: # Legacy seller session
      seller:
        - seller_id
        - auth_user_id
  
  deprecated:
    - Legacy admin authentication (hardcoded credentials)
    - Direct YFClaim seller authentication
    - Multiple session variable patterns
    - Hardcoded passwords in controllers

database:
  connection: MySQL/MariaDB
  name: yakima_finds
  user_table: yfa_auth_users    # Standardized from 'users' references
  tables:
    core:
      - events
      - event_categories
      - calendar_sources    # Moved before events to resolve FK dependency
      - local_shops        # Note: only has 'status' column, not 'active'
      - shop_categories    # Moved before local_shops to resolve FK dependency
      - shop_owners       # Moved before local_shops to resolve FK dependency
      
    modules:
      - yfa_auth_*        # YFAuth module tables (includes main user table)
      - yfc_*             # YFClaim module tables (yfc_sellers.password_hash now nullable)
      - theme_*           # YFTheme module tables
      
    communication:
      - communication_channels      # Chat channels/rooms
      - communication_messages      # Messages with threading support
      - communication_participants  # Channel membership and permissions
      - communication_attachments   # File attachments for messages
      - communication_reactions     # Message reactions (emoji)
      - communication_notifications # User notifications and alerts
      - communication_email_addresses # Email integration for channels
      
    system:
      - modules
      - module_settings
      - audit_log
      - scraping_logs

testing:
  structure:
    - tests/             # Root directory with custom test scripts
    - tests/Unit/        # Unit tests directory (exists but mostly unused)
    - tests/Feature/     # Feature tests directory (exists but mostly unused)
    - tests/Integration/ # Integration tests directory (exists but mostly unused)
    - tests/Scripts/     # Custom test scripts
  approach:
    - Custom PHP test scripts (not PHPUnit framework)
    - Manual test execution
    - No formal test framework actively used despite PHPUnit in composer.json
  main_scripts:
    - tests/run_all_tests.php
    - tests/test_core_functionality.php
    - tests/test_web_interfaces.php
    - tests/test_yfclaim.php
  chat_system_tests:
    - tests/test_communication_api.php
    - tests/test_communication_controller.php
    - tests/test_chat_ui_fix.html
    - tests/verify_dom_state.html

deployment:
  composer:
    autoload:
      "YFEvents\\": "src/"
      "YFEvents\\Modules\\": "modules/"
    autoload-dev:
      "YFEvents\\Tests\\": "tests/"
      
  configuration:
    location: config/deployment/
    structure:
      - deployment.yaml      # Main deployment configuration
      - environments/        # Environment-specific overrides
        - production.yaml
        - staging.yaml
        - development.yaml
      - versions/           # Version-specific requirements
        - 2.3.0.yaml
        - latest.yaml       # Symlink to current version
    approach: Configuration-driven deployment with environment awareness
      
  automated_deployment:
    location: scripts/deploy/
    target_platform: Digital Ocean (Ubuntu 22.04)
    supported_environments:
      - production (SSL, optimized)
      - staging (testing)
      - development (local)
    
    process:
      - Load deployment configuration from config/deployment/
      - Validate environment requirements
      - Clone/update repository (configurable branch)
      - Run installer.php with environment-specific components
      - Execute database schemas based on configuration
      - Configure Apache with SSL (production only)
      - Set up cron jobs for event scraping
      - Run health checks to verify deployment
      
    scripts:
      core:
        setup-server.sh: Initial server provisioning (LAMP stack)
        deploy.sh: Main deployment orchestrator (config-driven)
        update.sh: Update existing deployment
        rollback.sh: Rollback to previous version
      utilities:
        create-admin.php: Create admin users via YFAuth
        health-check.php: Comprehensive deployment validation
        run-sql-files.php: Database schema management
      configuration:
        apache-vhost.conf: Apache virtual host template
        lib/: Shared function libraries
          - config.sh: Configuration loader
          - database.sh: Database operations
          - validation.sh: Pre-flight checks
          - common.sh: Shared utilities
          
    requirements:
      server:
        - Ubuntu 22.04 LTS
        - 2GB RAM minimum
        - 20GB storage
      software:
        - PHP 8.1+ with extensions
        - MySQL 8.0+
        - Apache 2.4+
        - Composer 2.0+
        - Git
        - Certbot (for SSL)
        
    database_setup:
      schemas_order:
        1. Core tables (calendar, shops, modules)
        2. Communication system (full schema recommended)
        3. Module schemas (YFAuth, YFClaim, YFTheme)
        4. Optional improvements (performance, security, audit)
      configuration:
        - Database name: yakima_finds
        - User: yfevents
        - Character set: utf8mb4
        - Collation: utf8mb4_unicode_ci

development_environment:
  platform: Ubuntu 22.04 LTS (WSL2)
  stack:
    - PHP 8.1 with required extensions
    - MySQL 8.0
    - Apache 2.4 with mod_rewrite
    - Composer 2.x
  
  configuration:
    - Virtual host configured for localhost
    - Document root: /mnt/d/YFEventsCopy/public
    - Database: yakima_finds (user: yfevents)
    - Environment file: .env with APP_KEY generated
    
  issues_resolved:
    - Router group() method: Simplified routes to not use groups
    - Database foreign key ordering: Reordered table creation
    - User table references: Standardized to yfa_auth_users
    - Composer dependencies: Downgraded from PHP 8.2 to 8.1 compatible
    - Shop entity 'active' property: Removed redundant field
    - ClaimsController NULL dates: Added proper NULL handling
    - Homepage rendering: Fixed heredoc issue with output buffering
    - Chat UI visibility: Fixed JavaScript errors and CSS issues

recent_changes:
  authentication_unification:
    - Created unified AuthService wrapper
    - Migrated all authentication to YFAuth module
    - Standardized session variables across system
    - Removed hardcoded admin credentials
    - Updated ClaimsController to use AuthService
    
  yfclaim_refactoring:
    - Removed offer/bidding functionality completely
    - Sellers now authenticate via YFAuth (no local passwords)
    - Fixed database column mappings (preview_start/end vs start_date/end_date)
    - Fixed price field naming (price vs starting_price)
    - Added proper POST routes for form submissions
    - Implemented RESTful seller routes with parameter mapping
    - Added inquiry system for contact forms (replacing bidding)
    
  database_updates:
    - yfc_sellers.password_hash made nullable
    - Column naming standardized to match actual schema
    - No new migrations needed (working with existing schema)
    - Added auth_user_id to sellers table for YFAuth integration
    
  deprecated_features:
    - YFClaim offer/bidding system
    - Direct password handling in modules
    - Multiple authentication patterns
    - Hardcoded credentials
    - Non-RESTful route patterns

  routing_security_fixes:
    - Removed unnecessary routes (/health moved to API only)
    - Disabled YFClassifieds module (duplicate functionality)
    - Added authentication to all seller routes
    - Improved error messages for missing parameters
    - Fixed route testing inaccuracies
    - 100% of seller routes now secured

  chat_system_implementation:
    completed:
      - Domain layer with entities and value objects
      - Infrastructure repositories for all chat tables
      - Application services (CommunicationService, AdminSellerChatService)
      - API controllers for channels, messages, notifications
      - Container registration with dependency injection
      - Database schema using communication_* tables
      - Seed script for global Support and Selling Tips channels
      - Web interface with Bootstrap 5.1.3
      - Mobile responsive design with sidebar toggle
      - PWA support with service worker
      - Fixed all UI visibility issues
    
    architecture_decisions:
      - Used communication_schema_fixed.sql for advanced features
      - Domain types: public, private, event, vendor, announcement
      - Message types: text, system, announcement
      - Repository pattern with simplified field mapping
      - Service layer for business logic orchestration
      - PWA support with service worker for offline capability
      - Bootstrap CSS for consistent UI styling
    
    integration:
      - Authentication via YFAuth module
      - Session management standardized
      - Role-based access control
      - YFClaim item references in messages
      - Embedded iframe in seller dashboard
      - Real-time unread count updates
      - Auto-join channels on seller login

  homepage_overhaul:
    completed:
      - Phase 1: Container Registration
        - Fixed QRCodeService interface dependency
        - Created missing Claims repositories (Sale, Item, Offer)
        - Removed offer dependencies from ClaimService
        - Registered all repositories in ServiceProvider
      - Phase 2: Dynamic Homepage Content
        - Created PaginatedResult DTO
        - Injected services into HomeController
        - Added dynamic data fetching methods
        - Fixed Sale::fromArray column mappings
        - Homepage displays dynamic stats and content
      - Phase 3: Item Gallery Feature
        - Added /claims/items route for browsing all items
        - Created ItemRepository methods for cross-sale queries
        - Implemented filtering (category, price, search)
        - Added sorting and pagination
        - Responsive grid layout matching existing design
        - API endpoint for AJAX support
      - Phase 4: Routing System Fixes
        - Fixed Shop entity 'active' property issue
        - Added NULL handling for pickup dates in ClaimsController
        - Resolved homepage rendering with HomeControllerFixed trait
        - Migrated from heredoc to output buffering for reliability
    
    features_added:
      - Dynamic homepage with real data
      - Cross-sale item browsing gallery
      - Advanced filtering and search
      - Responsive design improvements
      - Fallback to static content on errors
    
    database_considerations:
      - Handled column name inconsistencies
      - Category as string (not ID) in items table
      - Image filename vs file_path mapping
      - Compatible with existing production schema
      - Shop table only has 'status' column, not 'active'

notes:
  - All hardcoded credentials removed from config files and controllers
  - Environment variables used throughout
  - Module system preserved and enhanced
  - Clean Architecture principles applied
  - Backwards compatibility maintained where possible
  - Security improvements implemented (unified auth, session management)
  - Production database schema preserved (with minor nullable adjustments)
  - YFClassifieds module disabled (overlaps with YFClaim)
  - Router simplified to not require group() method
  - Database schemas reordered to resolve dependencies
  - Authentication fully centralized through AuthService
  - YFClaim simplified to focus on sales without bidding complexity
  - RESTful routing patterns implemented for seller workflows
  - Session variables standardized across all modules
  - Chat system fully integrated with seller dashboard
  - All routes secured with proper authentication
  - Mobile-responsive design with Bootstrap integration