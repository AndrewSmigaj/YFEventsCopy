# YFEvents Refactor Architecture
# Clean Architecture Implementation with Domain-Driven Design
# Version: 2.0.0

system:
  name: YFEvents Refactor
  type: Web Application
  architecture: Clean Architecture (Hexagonal)
  patterns:
    - Domain-Driven Design
    - Repository Pattern
    - Dependency Injection
    - MVC (API-focused)
  
layers:
  domain:
    description: Core business logic with no external dependencies
    location: src/Domain/
    components:
      - name: Events
        entities:
          - Event
          - EventCategory
        services:
          - EventService
        interfaces:
          - EventRepositoryInterface
          - EventServiceInterface
      
      - name: Shops
        entities:
          - Shop
          - ShopCategory
        services:
          - ShopService
        interfaces:
          - ShopRepositoryInterface
          - ShopServiceInterface
      
      - name: Users
        entities:
          - User
          - Role
          - Permission
        interfaces:
          - UserRepositoryInterface
      
      - name: Claims
        entities:
          - Seller
          - Buyer
          - Item
          - Offer
          - Sale
        interfaces:
          - SellerRepositoryInterface
          - BuyerRepositoryInterface
          - ItemRepositoryInterface
          - OfferRepositoryInterface
          - SaleRepositoryInterface
      
      - name: Common
        interfaces:
          - EntityInterface
          - RepositoryInterface
          - ServiceInterface
  
  application:
    description: Application-specific business logic and use cases
    location: src/Application/
    components:
      - name: Services
        classes:
          - AdminService
          - ClaimService
          - ClaimAuthService
          - ConfigService
          - UserService
          - ActivityLogService
      
      - name: Controllers
        namespace: Admin
        classes:
          - ConfigController
          - UserController
      
      - name: Validation
        classes:
          - ConfigValidator
          - UserValidator
      
      - name: Bootstrap
        purpose: Application initialization
        class: Bootstrap
  
  infrastructure:
    description: External interfaces and implementations
    location: src/Infrastructure/
    components:
      - name: Container
        purpose: Dependency injection
        classes:
          - Container
          - ContainerInterface
      
      - name: Database
        purpose: Data persistence
        classes:
          - Connection
          - ConnectionInterface
          - AbstractRepository
      
      - name: Repositories
        implementations:
          - EventRepository
          - ShopRepository
          - UserRepository (planned)
          - ClaimRepositories (planned)
      
      - name: Config
        purpose: Configuration management
        classes:
          - Config
          - ConfigInterface
        files:
          - modules.php
      
      - name: Http
        purpose: HTTP handling
        classes:
          - Router
          - ErrorHandler
      
      - name: Services
        purpose: External service integrations
        classes:
          - EmailService
          - EmailEventProcessor
          - PermissionService
          - QRCodeService
          - SEOService
          - SMSService
      
      - name: Email
        purpose: Email processing
        classes:
          - CurlEmailProcessor
      
      - name: Providers
        purpose: Service registration
        classes:
          - ServiceProvider
  
  presentation:
    description: User interface layer (Controllers/API)
    location: src/Presentation/
    components:
      - name: Http Controllers
        classes:
          - BaseController
          - HomeController
          - EventController
          - ShopController
          - UserController
          - AuthController
          - AdminDashboardController
          - AdminEventController
          - AdminShopController
          - ClaimsController
          - ClassifiedsController
          - ThemeController
      
      - name: Api Controllers
        classes:
          - EventApiController
          - ShopApiController

database:
  system: MySQL
  version: "5.7+"
  features:
    - Spatial indexing
    - JSON columns
    - Full-text search
  
  schemas:
    - name: Core
      tables:
        - events
        - event_categories
        - calendar_sources
        - local_shops
        - shop_categories
        - shop_owners
    
    - name: Claims
      tables:
        - yfclaim_sellers
        - yfclaim_buyers
        - yfclaim_items
        - yfclaim_offers
        - yfclaim_sales
        - yfclaim_item_images
    
    - name: Auth
      tables:
        - users
        - roles
        - permissions
        - role_permissions
        - user_roles
    
    - name: Communication
      tables:
        - communication_chat_conversations
        - communication_chat_messages
        - communication_chat_participants
        - communication_forum_topics
        - communication_forum_posts

dependencies:
  runtime:
    php: "^8.1"
    extensions:
      - pdo
      - json
      - mbstring
    packages:
      - monolog/monolog: "^3.0"
      - guzzlehttp/guzzle: "^7.0"
      - vlucas/phpdotenv: "^5.0"
      - nesbot/carbon: "^2.0"
  
  development:
    packages:
      - phpunit/phpunit: "^10.0"
      - phpstan/phpstan: "^1.0"
      - friendsofphp/php-cs-fixer: "^3.0"
      - symfony/var-dumper: "^6.0"

configuration:
  structure:
    - type: Environment
      files:
        - .env
        - .env.example
    
    - type: Application
      location: config/
      files:
        - app.php
        - database.php
        - email.php
        - services/
    
    - type: Routes
      location: routes/
      files:
        - api.php
        - web.php

entry_points:
  web:
    - path: public/index.php
      description: Main entry point with router
  
  api:
    - path: api/
      description: RESTful API endpoints
  
  admin:
    - path: admin/
      description: Administrative interface
  
  cron:
    - path: scripts/
      description: Background job scripts

security:
  authentication:
    - type: Session-based
      implementation: Basic
    - type: API Token
      implementation: Planned
  
  authorization:
    - type: Role-based (RBAC)
      implementation: Partial
  
  protection:
    - CSRF tokens (planned)
    - Input validation
    - SQL injection prevention (PDO)
    - XSS protection (output escaping)

status:
  completion: 70%
  modules:
    events: 100%
    shops: 100%
    users: 100%
    communication: 100%
    claims: 70%
  
  missing:
    - View layer implementation
    - Comprehensive testing
    - Caching layer
    - Queue system
    - API documentation
    - Database migrations

deployment:
  current:
    - path: /home/robug/YFEvents/www/html/refactor/
    - url: https://backoffice.yakimafinds.com/refactor/
  
  strategy:
    - Parallel deployment with legacy
    - Shared database
    - Gradual migration

notes:
  - Legacy code exists in src/Models/ and src/Scrapers/
  - Transitioning from procedural to object-oriented
  - API-first approach with no view layer currently
  - YFClaim module needs controller implementation (4-5 hours)